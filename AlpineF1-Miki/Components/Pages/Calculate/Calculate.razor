@page "/calculator"
@using System.Text.Json;

@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Alpine F1 - Circuit tyre degradation claculator</PageTitle>

<h1>Alpine F1 - Circuit tyre degradation calculator</h1>

<p>Use the following below to work out the tyre degradation values!</p>

<h3>Select a circuit</h3>
<hr/>

@if (circuits != null && circuits.Any())
{
    <select @bind="selectedCircuit">
        @foreach (var circuit in circuits)
        {
            <option value="@circuit.id">@circuit.track_name</option>
        }
    </select>
}

<br/>
<button @onclick="OnCircuitSelectedButtonClick">Get Circuit Points</button>
<hr/>

@if (dataLoaded)
{
    <h3>Circuit points</h3>

    <table class="table">
        <thead>
            <tr>
                @foreach (var point in displayedCircuitPoints)
                {
                    <th>Point</th>
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                @foreach (var point in displayedCircuitPoints)
                {
                    <td>@point</td>
                }
            </tr>
        </tbody>
    </table>

    <button @onclick="PreviousPage">Previous</button>
    <button @onclick="NextPage">Next</button>
}

@code {
    string API_URL = "http://localhost:5021/";


    private IEnumerable<AplineCircuits>? circuits = Array.Empty<AplineCircuits>();
    private AplineCircuitPoints circuitPoints;
    private List<string> allCircuitPoints = new List<string>();
    private List<string> displayedCircuitPoints = new List<string>();
    private int pageSize = 10;
    private int totalPages;
    private int currentPage = 1;
    private int selectedCircuit;
    private bool dataLoaded = false;
    private bool isLoading = true;

    private async Task initPage()
    {
        HttpClient httpClient = new HttpClient();
        HttpResponseMessage response = await httpClient.GetAsync(API_URL + "api/AplineF1Miki/GetCircuits");

        System.Diagnostics.Debug.WriteLine("API response: " + response);

        var jsonResponse = await response.Content.ReadAsStringAsync();
        System.Diagnostics.Debug.WriteLine("JSON response: " + jsonResponse);

        httpClient.Dispose();

        using (var responseStream = await response.Content.ReadAsStreamAsync())
        {
            circuits = JsonSerializer.Deserialize<IEnumerable<AplineCircuits>>(responseStream);
        }

        Console.WriteLine("Response: " + response);
        Console.WriteLine("******************************");
    }

    protected override async Task OnInitializedAsync()
    {
        await this.initPage();
    }

    private async Task<AplineCircuitPoints> getCircuitPoints()
    {
        IEnumerable<AplineCircuitPoints> points = Array.Empty<AplineCircuitPoints>();
        AplineCircuitPoints circuitPoints = new AplineCircuitPoints();

        HttpClient httpClient = new HttpClient();

        var formContent = new FormUrlEncodedContent(new[]
        {
            new KeyValuePair<string, string>("id", selectedCircuit.ToString()),
        });

        HttpResponseMessage response = await httpClient.PostAsync(API_URL + "api/AplineF1Miki/GetCircuitPoints", formContent);

        System.Diagnostics.Debug.WriteLine("API response (Circuit points): " + response);

        if (response.IsSuccessStatusCode)
        {
            var jsonResponse = await response.Content.ReadAsStringAsync();
            System.Diagnostics.Debug.WriteLine("JSON response: " + jsonResponse);

            try
            {
                points = JsonSerializer.Deserialize<IEnumerable<AplineCircuitPoints>>(jsonResponse);
                circuitPoints = points.FirstOrDefault();
                System.Diagnostics.Debug.WriteLine("Deserialized circuit points: " + JsonSerializer.Serialize(circuitPoints));

                // Your existing code for initialization
                if (circuitPoints != null && !string.IsNullOrWhiteSpace(circuitPoints.circuit_points))
                {
                    allCircuitPoints = circuitPoints.circuit_points.Split(',').ToList();
                    totalPages = (int)Math.Ceiling((double)allCircuitPoints.Count / pageSize);
                    currentPage = 1;
                    UpdateDisplayedCircuitPoints();
                    dataLoaded = true; // Set the flag to indicate that data has been loaded

                    // Update the UI for the circuit points table only
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine("Deserialization error: " + ex.Message);
            }
        }
        else
        {
            System.Diagnostics.Debug.WriteLine("API call failed with status code: " + response.StatusCode);
        }

        return circuitPoints;
    }

    private async Task LoadPage(int page)
    {
        if (!dataLoaded)
        {
            if (circuitPoints != null && !string.IsNullOrWhiteSpace(circuitPoints.circuit_points))
            {
                allCircuitPoints = circuitPoints.circuit_points.Split(',').ToList();
                totalPages = (int)Math.Ceiling((double)allCircuitPoints.Count / pageSize);
            }

            dataLoaded = true;
        }

        var startIndex = (page - 1) * pageSize;
        displayedCircuitPoints = allCircuitPoints.Skip(startIndex).Take(pageSize).ToList();

        currentPage = page;
    }

    private async Task OnCircuitSelectedButtonClick()
    {
        await getCircuitPoints();
    }

    private void UpdateDisplayedCircuitPoints()
    {
        var startIndex = (currentPage - 1) * pageSize;
        displayedCircuitPoints = allCircuitPoints.Skip(startIndex).Take(pageSize).ToList();
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage -= 1;
            await LoadPage(currentPage - 1);
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage += 1;

            await LoadPage(currentPage + 1);
        }
    }
}