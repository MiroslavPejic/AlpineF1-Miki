@page "/calculator"
@using System.Text.Json;

@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Alpine F1 - Circuit tyre degradation calculator</PageTitle>

<h1>Alpine F1 - Circuit tyre degradation calculator</h1>

<p>Use the following below to work out the tyre degradation values!</p>

<h3>Select a circuit</h3>
<hr />

@if (circuits != null && circuits.Any())
{
    <select @bind="selectedCircuit">
        @foreach (var circuit in circuits)
        {
            <option value="@circuit.id">@circuit.track_name</option>
        }
    </select>
}

<br />
<br />
<button class="button" @onclick="OnCircuitSelectedButtonClick">Get Circuit Points</button>
<hr />

@if (dataLoaded)
{
    <h3>Circuit points</h3>

    <table class="table">
        <thead>
            <tr>
                @foreach (var point in displayedCircuitPoints)
                {
                    <th>Point</th>
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                @foreach (var point in displayedCircuitPoints)
                {
                    <td>@point</td>
                }
            </tr>
        </tbody>
    </table>

    <button class="button" @onclick="PreviousPage">Previous</button>
    <button class="button" @onclick="NextPage">Next</button>

    <hr />

    <h3>Weather Information</h3>
    <button class="button" @onclick="OnLoadWeatherInformationClicked">Click to load weather information</button>

    @if (weatherDataLoaded)
    {
        <hr />

        @if (weatherData != null)
        {
            <h3>Location: @weatherData.location.name, @weatherData.location.region, @weatherData.location.country</h3>
            <p>Last updated: @weatherData.current.last_updated</p>
            <table class="table">
                <thead>
                    <tr>
                        <td><strong>Last Updated</strong></td>
                        <td><strong>Condition</strong></td>
                        <td><strong>Wind:</strong></td>
                        <td><strong>Humidity:</strong></td>
                        <td><strong>Visibility:</strong></td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@weatherData.current.temp_c°C</td>
                        <td>@weatherData.current.condition.text</td>
                        <td>@weatherData.current.wind_kph km/h, @weatherData.current.wind_dir</td>
                        <td>@weatherData.current.humidity%</td>
                        <td>@weatherData.current.vis_km km</td>
                    </tr>
                </tbody>
            </table>

            <br />

            <h3>Select a Tyre</h3>
            <hr />

            @if (tyres != null && tyres.Any())
            {
                <select @bind="selectedTyre">
                    @foreach (var tyre in tyres)
                    {
                        <option value="@tyre.id">@tyre.name</option>
                    }
                </select>
            }

            <br />
            <br />

            <table class="table">
                <thead>
                    <tr>
                        <th>Type</th>
                        <th>Degredation coefficient</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var tyre in tyreDegradations)
                    {
                        <tr id="@tyre.id">
                            <td>@tyre.type</td>
                            <td>@tyre.degradationCoefficient</td>
                        </tr>
                    }
                </tbody>
            </table>

            <button class="button" @onclick="OnCalculcateTyreDegradationClicked">Click to calculate tyre degradation</button>

            @if (averageDegradation != "" && degradationRange != "")
            {
                <hr />
                <h3>
                    Results
                </h3>
                <table class="table">
                    <thead>
                        <tr>
                            <td>Average Degradation</td>
                            <td>Degradation Range</td>
                        </tr>
                    </thead>
                    <tbody>
                    <td>@averageDegradation</td>
                    <td>@degradationRange</td>
                    </tbody>
                </table>
            }
        }
        else
        {
            <p>No weather data available.</p>
        }
    }
}

@code {
    string API_URL = "http://localhost:5021/";


    private IEnumerable<AplineCircuits>? circuits = Array.Empty<AplineCircuits>();
    private AplineCircuitPoints circuitPoints;
    private WeatherData weatherData;
    private IEnumerable<AlpineTyre>? tyres = Array.Empty<AlpineTyre>();
    private IEnumerable<AlpineTyreDegradation>? tyreDegradations = Array.Empty<AlpineTyreDegradation>();

    private List<string> allCircuitPoints = new List<string>();
    private List<string> displayedCircuitPoints = new List<string>();
    private int pageSize = 10;
    private int totalPages;
    private int currentPage = 1;
    private int selectedCircuit;
    private int selectedTyre;
    private bool dataLoaded = false;
    private bool weatherDataLoaded = false;
    private bool isLoading = true;

    private string? degradationRange = "";
    private string? averageDegradation = "";

    private async Task initPage()
    {
        HttpClient httpClient = new HttpClient();
        HttpResponseMessage response = await httpClient.GetAsync(API_URL + "api/AplineF1Miki/GetCircuits");

        System.Diagnostics.Debug.WriteLine("API response: " + response);

        var jsonResponse = await response.Content.ReadAsStringAsync();
        System.Diagnostics.Debug.WriteLine("JSON response: " + jsonResponse);

        httpClient.Dispose();

        using (var responseStream = await response.Content.ReadAsStreamAsync())
        {
            circuits = JsonSerializer.Deserialize<IEnumerable<AplineCircuits>>(responseStream);
        }

        Console.WriteLine("Response: " + response);
        Console.WriteLine("******************************");
    }

    protected override async Task OnInitializedAsync()
    {
        await this.initPage();
    }

    private async Task<AplineCircuitPoints> getCircuitPoints()
    {
        IEnumerable<AplineCircuitPoints> points = Array.Empty<AplineCircuitPoints>();
        AplineCircuitPoints circuitPoints = new AplineCircuitPoints();

        HttpClient httpClient = new HttpClient();

        var formContent = new FormUrlEncodedContent(new[]
        {
            new KeyValuePair<string, string>("id", selectedCircuit.ToString()),
        });

        HttpResponseMessage response = await httpClient.PostAsync(API_URL + "api/AplineF1Miki/GetCircuitPoints", formContent);

        System.Diagnostics.Debug.WriteLine("API response (Circuit points): " + response);

        if (response.IsSuccessStatusCode)
        {
            var jsonResponse = await response.Content.ReadAsStringAsync();
            System.Diagnostics.Debug.WriteLine("JSON response: " + jsonResponse);

            try
            {
                points = JsonSerializer.Deserialize<IEnumerable<AplineCircuitPoints>>(jsonResponse);
                circuitPoints = points.FirstOrDefault();
                System.Diagnostics.Debug.WriteLine("Deserialized circuit points: " + JsonSerializer.Serialize(circuitPoints));

                // Your existing code for initialization
                if (circuitPoints != null && !string.IsNullOrWhiteSpace(circuitPoints.circuit_points))
                {
                    allCircuitPoints = circuitPoints.circuit_points.Split(',').ToList();
                    totalPages = (int)Math.Ceiling((double)allCircuitPoints.Count / pageSize);
                    currentPage = 1;
                    UpdateDisplayedCircuitPoints();
                    dataLoaded = true; // Set the flag to indicate that data has been loaded

                    // Update the UI for the circuit points table only
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine("Deserialization error: " + ex.Message);
            }
        }
        else
        {
            System.Diagnostics.Debug.WriteLine("API call failed with status code: " + response.StatusCode);
        }

        return circuitPoints;
    }

    private async Task<WeatherData> getWeatherData(AplineCircuits circuit)
    {
        WeatherData data = new WeatherData();

        string weatherApiUrl = $"http://api.weatherapi.com/v1/current.json?key=97ae47bde535426ab75153443241505&q={circuit.track_location},&aqi=no";

        HttpClient httpClient = new HttpClient();
        HttpResponseMessage response = await httpClient.GetAsync(weatherApiUrl);

        if (response.IsSuccessStatusCode)
        {
            var jsonResponse = await response.Content.ReadAsStringAsync();
            System.Diagnostics.Debug.WriteLine("JSON response: " + jsonResponse);

            data = JsonSerializer.Deserialize<WeatherData>(jsonResponse);

            weatherDataLoaded = true;
        }

        StateHasChanged();

        return data;
    }

    private async Task getTyres()
    {
        HttpClient httpClient = new HttpClient();
        HttpResponseMessage response = await httpClient.GetAsync(API_URL + "api/AplineF1Miki/GetAllTyres");

        System.Diagnostics.Debug.WriteLine("API response: " + response);

        httpClient.Dispose();

        using (var responseStream = await response.Content.ReadAsStreamAsync())
        {
            tyres = JsonSerializer.Deserialize<IEnumerable<AlpineTyre>>(responseStream);
        }

        Console.WriteLine("Response: " + response);
        Console.WriteLine("******************************");

    }

    private async Task getTyreDegradationValues()
    {
        HttpClient httpClient = new HttpClient();
        HttpResponseMessage response = await httpClient.GetAsync(API_URL + "api/AplineF1Miki/GetTyreDegradationCoefficient");

        System.Diagnostics.Debug.WriteLine("API response: " + response);

        httpClient.Dispose();

        using (var responseStream = await response.Content.ReadAsStreamAsync())
        {
            tyreDegradations = JsonSerializer.Deserialize<IEnumerable<AlpineTyreDegradation>>(responseStream);
        }

        Console.WriteLine("Response: " + response);
        Console.WriteLine("******************************");
    }

    private async Task LoadPage(int page)
    {
        if (!dataLoaded)
        {
            if (circuitPoints != null && !string.IsNullOrWhiteSpace(circuitPoints.circuit_points))
            {
                allCircuitPoints = circuitPoints.circuit_points.Split(',').ToList();
                totalPages = (int)Math.Ceiling((double)allCircuitPoints.Count / pageSize);
            }

            dataLoaded = true;
        }

        var startIndex = (page - 1) * pageSize;
        displayedCircuitPoints = allCircuitPoints.Skip(startIndex).Take(pageSize).ToList();

        currentPage = page;
    }

    private async Task OnCircuitSelectedButtonClick()
    {
        await getCircuitPoints();
    }

    private async Task OnLoadWeatherInformationClicked()
    {
        if (selectedCircuit != 0 && circuits.Any(c => c.id == selectedCircuit))
        {
            var selectedCircuitInfo = circuits.First(c => c.id == selectedCircuit);
            weatherData = await getWeatherData(selectedCircuitInfo);

            await getTyres();
            await getTyreDegradationValues();
        }
        else
        {
            // Handle circuit selection error
        }
    }

    private async Task OnCalculcateTyreDegradationClicked()
    {
        if (selectedTyre != 0 && tyres.Any(c => c.id == selectedTyre))
        {
            var selectedTyreInfo = tyres.First(c => c.id == selectedTyre);
            var tyreDegradationValues = new List<double>();

            // Convert the degradation coefficient to a double
            if (double.TryParse(selectedTyreInfo.degradationCoefficient, out double degradationCoefficient))
            {
                foreach (var circuitPoint in allCircuitPoints)
                {
                    // Calculate tyre degradation for each point on the track
                    var tyreDegradation = CalculateTyreDegradation(
                        trackDegradationPoint: Convert.ToDouble(circuitPoint),
                        trackTemperature: weatherData.current.temp_c + 273.15, // Convert temperature to Kelvin
                        tyreCoefficient: degradationCoefficient * GetTyreCoefficient(selectedTyreInfo.name)
                    );

                    tyreDegradationValues.Add(tyreDegradation);
                }

                // Calculate average tyre degradation
                var averageTyreDegradation = CalculateAverageTyreDegradation(tyreDegradationValues);
                averageDegradation = averageTyreDegradation.ToString();

                // Calculate range of tyre degradation
                var tyreDegradationRange = CalculateTyreDegradationRange(tyreDegradationValues);
                degradationRange = tyreDegradationRange.ToString();

                // Output or use the averageTyreDegradation and tyreDegradationRange as needed
                // Output average and range to the console
                System.Diagnostics.Debug.WriteLine($"Average Tyre Degradation: {averageTyreDegradation}");
                System.Diagnostics.Debug.WriteLine($"Tyre Degradation Range: {tyreDegradationRange}");
            }
            else
            {
                // Handle case where degradation coefficient is not a valid number
                System.Diagnostics.Debug.WriteLine("Invalid degradation coefficient.");
            }
        }
        else
        {
            // Handle case where selected tyre is not valid
            System.Diagnostics.Debug.WriteLine("Invalid selected tyre.");
        }
    }

    private void UpdateDisplayedCircuitPoints()
    {
        var startIndex = (currentPage - 1) * pageSize;
        displayedCircuitPoints = allCircuitPoints.Skip(startIndex).Take(pageSize).ToList();
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage -= 1;
            await LoadPage(currentPage - 1);
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage += 1;

            await LoadPage(currentPage + 1);
        }
    }

    private double CalculateTyreDegradation(double trackDegradationPoint, double trackTemperature, double tyreCoefficient)
    {
        return (trackDegradationPoint * trackTemperature) / tyreCoefficient;
    }

    private double CalculateAverageTyreDegradation(IEnumerable<double> tyreDegradations)
    {
        return tyreDegradations.Any() ? tyreDegradations.Average() : 0.0;
    }

    private double CalculateTyreDegradationRange(IEnumerable<double> tyreDegradations)
    {
        return tyreDegradations.Any() ? tyreDegradations.Max() - tyreDegradations.Min() : 0.0;
    }

    private double GetTyreCoefficient(string tyreType)
    {
        switch (tyreType)
        {
            case "Soft":
                return 0.8;
            case "Medium":
                return 0.9;
            case "Hard":
                return 0.75;
            default:
                return 1.0; // Default to 100% if tyre type is not recognized
        }
    }
}